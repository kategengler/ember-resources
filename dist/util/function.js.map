{"version":3,"file":"function.js","sources":["../../../node_modules/.pnpm/@babel+runtime@7.18.3/node_modules/@babel/runtime/helpers/esm/classApplyDescriptorSet.js","../../../node_modules/.pnpm/@babel+runtime@7.18.3/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js","../../src/util/function.ts"],"sourcesContent":["export default function _classApplyDescriptorSet(receiver, descriptor, value) {\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n\n    descriptor.value = value;\n  }\n}","import classApplyDescriptorSet from \"./classApplyDescriptorSet.js\";\nimport classExtractFieldDescriptor from \"./classExtractFieldDescriptor.js\";\nexport default function _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = classExtractFieldDescriptor(receiver, privateMap, \"set\");\n  classApplyDescriptorSet(receiver, descriptor, value);\n  return value;\n}","import { tracked } from '@glimmer/tracking';\nimport { assert } from '@ember/debug';\nimport { waitForPromise } from '@ember/test-waiters';\n\nimport { resource } from '../core/function-based';\n\nimport type { Hooks } from '../core/function-based';\n\nexport type ResourceFn<Return = unknown> = (hooks: Hooks) => Return | Promise<Return>;\n\ntype Vanilla<Return> = [object, ResourceFn<Return>];\ntype WithInitialValue<Return> = [object, NotFunction<Return>, ResourceFn<Return>];\n\ntype NotFunction<T> = T extends Function ? never : T;\ntype UseFunctionArgs<Return> = Vanilla<Return> | WithInitialValue<Return>;\n\n/**\n * _An example utilty that uses [[resource]]_\n *\n * Any tracked data accessed in a tracked function _before_ an `await`\n * will \"entangle\" with the function -- we can call these accessed tracked\n * properties, the \"tracked prelude\". If any properties within the tracked\n * payload  change, the function will re-run.\n *\n * ```js\n * import Component from '@glimmer/component';\n * import { tracked } from '@glimmer/tracking';\n * import { trackedFunction }  from 'ember-resources/util/function';\n *\n * class Demo extends Component {\n *   @tracked id = 1;\n *\n *   request = trackedFunction(this, async () => {\n *     let response = await fetch(`https://swapi.dev/api/people/${this.id}`);\n *     let data = await response.json();\n *\n *     return data; // { name: 'Luke Skywalker', ... }\n *   });\n *\n *   updateId = (event) => this.id = event.target.value;\n *\n *   // Renders \"Luke Skywalker\"\n *   <template>\n *     {{this.request.value.name}}\n *\n *     <input value={{this.id}} {{on 'input' this.updateId}}>\n *   </template>\n * }\n * ```\n * _Note_, this example uses the proposed `<template>` syntax from the [First-Class Component Templates RFC][rfc-799]\n *\n * Also note that after an `await`, the `this` context should not be accessed as it could lead to\n * destruction/timing issues.\n *\n * [rfc-799]: https://github.com/emberjs/rfcs/pull/779\n *\n *\n * @param {Object} destroyable context, e.g.: component instance aka \"this\"\n * @param {Function} theFunction the function to run with the return value available on .value\n */\nexport function trackedFunction<Return>(...passed: Vanilla<Return>): State<Return>;\n\n/**\n * _An example utilty that uses [[resource]]_\n *\n * Any tracked data accessed in a tracked function _before_ an `await`\n * will \"entangle\" with the function -- we can call these accessed tracked\n * properties, the \"tracked prelude\". If any properties within the tracked\n * payload  change, the function will re-run.\n *\n * The optional initial values can be used to provide a nicer fallback than \"null\"\n *\n * ```js\n * import Component from '@glimmer/component';\n * import { tracked } from '@glimmer/tracking';\n * import { trackedFunction }  from 'ember-resources/util/function';\n *\n * class Demo extends Component {\n *   @tracked id = 1;\n *\n *   request = trackedFunction(this, { initial value here }, async () => {\n *     let response = await fetch(`https://swapi.dev/api/people/${this.id}`);\n *     let data = await response.json();\n *\n *     return data; // { name: 'Luke Skywalker', ... }\n *   });\n *\n *   updateId = (event) => this.id = event.target.value;\n *\n *   // Renders \"Luke Skywalker\"\n *   <template>\n *     {{this.request.value.name}}\n *\n *     <input value={{this.id}} {{on 'input' this.updateId}}>\n *   </template>\n * }\n * ```\n * _Note_, this example uses the proposed `<template>` syntax from the [First-Class Component Templates RFC][rfc-799]\n *\n * Also note that after an `await`, the `this` context should not be accessed as it could lead to\n * destruction/timing issues.\n *\n * [rfc-799]: https://github.com/emberjs/rfcs/pull/779\n *\n * @param {Object} destroyable context, e.g.: component instance aka \"this\"\n * @param {Object} initialValue - a non-function that matches the shape of the eventual return value of theFunction\n * @param {Function} theFunction the function to run with the return value available on .value\n */\nexport function trackedFunction<Return>(...passed: WithInitialValue<Return>): State<Return>;\n\nexport function trackedFunction<Return>(...passedArgs: UseFunctionArgs<Return>) {\n  let [context] = passedArgs;\n  let initialValue: Return | undefined;\n  let fn: ResourceFn<Return>;\n\n  assert(\n    `Expected second argument to useFunction to either be an initialValue or the function to run`,\n    passedArgs[1] !== undefined\n  );\n\n  if (hasNoInitialValue(passedArgs)) {\n    fn = passedArgs[1];\n  } else {\n    initialValue = passedArgs[1];\n    fn = passedArgs[2];\n  }\n\n  return resource<State<Return>>(context, (hooks) => {\n    let state = new State(fn, hooks, initialValue);\n\n    state.retry();\n\n    return state;\n  });\n}\n\n/**\n * State container that represents the asynchrony of a `trackedFunction`\n */\nexport class State<Value> {\n  @tracked isResolved = false;\n  @tracked resolvedValue?: Value;\n  @tracked error?: unknown;\n\n  #fn: ResourceFn<Value>;\n  #hooks: Hooks;\n  #initialValue: Value | undefined;\n\n  constructor(fn: ResourceFn<Value>, hooks: Hooks, initialValue?: Value) {\n    this.#fn = fn;\n    this.#hooks = hooks;\n    this.#initialValue = initialValue;\n  }\n\n  get value() {\n    return this.resolvedValue || this.#initialValue || null;\n  }\n\n  get isPending() {\n    return !this.isResolved;\n  }\n\n  get isLoading() {\n    return this.isPending;\n  }\n\n  get isError() {\n    return Boolean(this.error);\n  }\n\n  /**\n   * Will re-invoke the function passed to `trackedFunction`\n   * this will also re-set some properties on the `State` instance.\n   * This is the same `State` instance as before, as the `State` instance\n   * is tied to the `fn` passed to `trackedFunction`\n   *\n   * `error` or `resolvedValue` will remain as they were previously\n   * until this promise resolves, and then they'll be updated to the new values.\n   */\n  retry = async () => {\n    try {\n      let notQuiteValue = this.#fn(this.#hooks);\n      let promise = Promise.resolve(notQuiteValue);\n\n      waitForPromise(promise);\n\n      let result = await promise;\n\n      this.error = undefined;\n      this.resolvedValue = result;\n    } catch (e) {\n      this.error = e;\n    } finally {\n      this.isResolved = true;\n    }\n  };\n}\n\n/**\n * @private\n *\n * type-guard\n */\nfunction hasNoInitialValue<R>(args: UseFunctionArgs<R>): args is Vanilla<R> {\n  return args.length === 2;\n}\n"],"names":["_classApplyDescriptorSet","receiver","descriptor","value","set","call","writable","TypeError","_classPrivateFieldSet","privateMap","classExtractFieldDescriptor","classApplyDescriptorSet","trackedFunction","passedArgs","context","initialValue","fn","assert","undefined","hasNoInitialValue","resource","hooks","state","State","retry","_class","_fn","WeakMap","_hooks","_initialValue","constructor","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_classPrivateFieldInitSpec","_defineProperty","notQuiteValue","_classPrivateFieldGet","promise","Promise","resolve","waitForPromise","result","error","resolvedValue","e","isResolved","isPending","isLoading","isError","Boolean","_applyDecoratedDescriptor","prototype","tracked","configurable","enumerable","initializer","args","length"],"mappings":"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"}