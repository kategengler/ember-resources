{"version":3,"file":"remote-data.js","sources":["../../src/util/remote-data.ts"],"sourcesContent":["import { tracked } from '@glimmer/tracking';\nimport { waitForPromise } from '@ember/test-waiters';\n\nimport { resource, resourceFactory } from '../core/function-based';\n\nimport type { Hooks } from '../core/function-based';\n\ntype FetchOptions = Parameters<typeof fetch>[1];\n\n/**\n * @protected\n */\nexport class State<T = unknown> {\n  /**\n   * If an exception was thrown while making the request, the error\n   * thrown will be here.\n   */\n  @tracked error: Error | null = null;\n  /**\n   * The resolved value of the fetch request\n   */\n  @tracked value: T | null = null;\n\n  /**\n   * HTTP status code.\n   */\n  @tracked status: null | number = null;\n\n  /**\n   * true if the request has finished\n   */\n  get isResolved() {\n    return Boolean(this.value) || Boolean(this.error);\n  }\n\n  /**\n   * Alias for isLoading\n   */\n  get isPending() {\n    return this.isLoading;\n  }\n\n  /**\n   * true if the fetch request is in progress\n   */\n  get isLoading() {\n    return !this.isResolved;\n  }\n\n  /**\n   * true if the request throws an exception\n   */\n  get isError() {\n    return Boolean(this.error);\n  }\n}\n\n/**\n * Native [fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)\n * but with built-in [AbortController](https://developer.mozilla.org/en-US/docs/Web/API/AbortController)\n *\n * example with composition (maybe you want to implement your own version\n * that also wraps up authorization headers):\n * ```js\n * import { tracked } from '@glimmer/tracking';\n * import { use, resource } from 'ember-resources';\n * import { remoteData } from 'ember-resources/util/remote-data';\n *\n * class Demo {\n *   @tracked id = 1;\n *\n *   @use myData = resource((hooks) =>\n *     remoteData(hooks, `https://...${this.id}`)\n *   );\n * }\n * ```\n *\n * The same example, but without `@use`\n *\n * ```js\n * import { tracked } from '@glimmer/tracking';\n * import { resource } from 'ember-resources';\n * import { remoteData } from 'ember-resources/util/remote-data';\n *\n * class Demo {\n *   @tracked id = 1;\n *\n *   myData = resource(this, (hooks) =>\n *     remoteData(hooks, `https://...${this.id}`)\n *   );\n * }\n * ```\n *\n */\nexport function remoteData<T = unknown>(\n  { on }: Hooks,\n  url: string,\n  options: FetchOptions = {}\n): State<T> {\n  let state = new State<T>();\n  let controller = new AbortController();\n\n  on.cleanup(() => controller.abort());\n\n  waitForPromise(\n    fetch(url, { signal: controller.signal, ...options })\n      .then((response) => {\n        state.status = response.status;\n\n        return response.json();\n      })\n      .then((data) => {\n        state.value = data;\n      })\n      .catch((error) => {\n        state.error = error;\n      })\n  );\n\n  return state;\n}\n\n/**\n * json-based remote data utility.\n *\n * this API mimics the API of `fetch`, and will give you a reactive\n * [[State]] object, but won't be able to re-fetch when the url or options\n * change\n *\n * ```js\n * import { tracked } from '@glimmer/tracking';\n * import { use } from 'ember-resources';\n * import { RemoteData } from 'ember-resources/util/remote-data';\n *\n * class Demo {\n *   @use myData = RemoteData(`https://some.domain.io`);\n *\n *   @use withOptions = RemoteData(`https://some.domain.io`, {\n *     headers: {\n *       Authorization: 'Bearer <token>'\n *     }\n *   });\n * }\n * ```\n *\n * In strict mode with &lt;template&gt;\n * ```jsx gjs\n * import { RemoteData } from 'ember-resources/util/remote-data';\n *\n * const options = (token) => ({\n *   headers: {\n *     Authorization: `Bearer ${token}`\n *   }\n * });\n *\n * <template>\n *  {{#let (RemoteData \"https://some.domain\" (options \"my-token\")) as |state|}}\n *    {{state.isLoading}}\n *    {{state.value}}\n *  {{/let}}\n * </template>\n * ```\n *\n */\nexport function RemoteData<T = unknown>(url: string, options?: FetchOptions): State<T>;\n\n/**\n * json-based remote data utility\n *\n *\n * For a reactive URL (causing the underlyng fetch to re-run when the URL changes),\n * the url must be the return value from a function passed to\n * `RemoteData`.\n *\n * ```js\n * import { tracked } from '@glimmer/tracking';\n * import { use } from 'ember-resources';\n * import { RemoteData } from 'ember-resources/util/remote-data';\n *\n * class Demo {\n *   @tracked url = 'https:// .... '\n *\n *   @use myData = RemoteData(() => this.url);\n * }\n * ```\n */\nexport function RemoteData<T = unknown>(url: () => string): State<T>;\n\n/**\n * json-based remote data utility\n *\n * When you want the remote data request to re-fetch\n * when either the URL or `FetchOptions` change, the `url`\n * becomes a property on the object returned from the thunk.\n *\n * ```js\n * import { tracked } from '@glimmer/tracking';\n * import { use } from 'ember-resources';\n * import { RemoteData } from 'ember-resources/util/remote-data';\n *\n * class Demo {\n *   @tracked id = 2;\n *   @tracked postData = '';\n *\n *   @use myData = RemoteData(() => ({\n *     url: `https://this.some.domain/${this.id}`,\n *     method: 'POST',\n *     body: this.postData\n *   }));\n * }\n * ```\n */\nexport function RemoteData<T = unknown>(options: () => { url: string } & FetchOptions): State<T>;\n\n/**\n * json-based remote data utility\n */\nexport function RemoteData<T = unknown>(\n  url: string | (() => string) | (() => { url: string } & FetchOptions),\n  opts?: FetchOptions\n) {\n  return resource((hooks) => {\n    let result = typeof url === 'string' ? url : url();\n    let targetUrl: string;\n    let options: FetchOptions = {};\n\n    if (typeof result === 'string') {\n      targetUrl = result;\n    } else {\n      let { url, ...opts } = result;\n\n      targetUrl = url;\n      options = opts;\n    }\n\n    if (opts) {\n      options = { ...options, ...opts };\n    }\n\n    return remoteData<T>(hooks, targetUrl, options);\n  });\n}\n\nresourceFactory(RemoteData);\n"],"names":["State","_class","constructor","_initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","isResolved","Boolean","value","error","isPending","isLoading","isError","_applyDecoratedDescriptor","prototype","tracked","configurable","enumerable","writable","initializer","remoteData","on","url","options","state","controller","AbortController","cleanup","abort","waitForPromise","fetch","signal","then","response","status","json","data","catch","RemoteData","opts","resource","hooks","result","targetUrl","resourceFactory"],"mappings":";;;;;;;AASA;AACA;AACA;AACA,IAAaA,KAAK,IAAAC,MAAA,GAAX,MAAMD,KAAK,CAAc;EAAAE,WAAA,GAAA;AAAAC,IAAAA,0BAAA,gBAAAC,WAAA,EAAA,IAAA,CAAA,CAAA;AAAAD,IAAAA,0BAAA,gBAAAE,YAAA,EAAA,IAAA,CAAA,CAAA;AAAAF,IAAAA,0BAAA,iBAAAG,YAAA,EAAA,IAAA,CAAA,CAAA;AAAA,GAAA;AAgB9B;AACF;AACA;EACE,IAAIC,UAAUA,GAAG;AACf,IAAA,OAAOC,OAAO,CAAC,IAAI,CAACC,KAAK,CAAC,IAAID,OAAO,CAAC,IAAI,CAACE,KAAK,CAAC,CAAA;AACnD,GAAA;;AAEA;AACF;AACA;EACE,IAAIC,SAASA,GAAG;IACd,OAAO,IAAI,CAACC,SAAS,CAAA;AACvB,GAAA;;AAEA;AACF;AACA;EACE,IAAIA,SAASA,GAAG;IACd,OAAO,CAAC,IAAI,CAACL,UAAU,CAAA;AACzB,GAAA;;AAEA;AACF;AACA;EACE,IAAIM,OAAOA,GAAG;AACZ,IAAA,OAAOL,OAAO,CAAC,IAAI,CAACE,KAAK,CAAC,CAAA;AAC5B,GAAA;AACF,CAAC,GAAAN,WAAA,GAAAU,yBAAA,CAAAb,MAAA,CAAAc,SAAA,EAAA,OAAA,EAAA,CAtCEC,OAAO,CAAA,EAAA;EAAAC,YAAA,EAAA,IAAA;EAAAC,UAAA,EAAA,IAAA;EAAAC,QAAA,EAAA,IAAA;AAAAC,EAAAA,WAAA,cAAA;AAAA,IAAA,OAAuB,IAAI,CAAA;AAAA,GAAA;AAAA,CAAAf,CAAAA,EAAAA,YAAA,GAAAS,yBAAA,CAAAb,MAAA,CAAAc,SAAA,YAIlCC,OAAO,CAAA,EAAA;EAAAC,YAAA,EAAA,IAAA;EAAAC,UAAA,EAAA,IAAA;EAAAC,QAAA,EAAA,IAAA;AAAAC,EAAAA,WAAA,cAAA;AAAA,IAAA,OAAmB,IAAI,CAAA;AAAA,GAAA;AAAA,CAAAd,CAAAA,EAAAA,YAAA,GAAAQ,yBAAA,CAAAb,MAAA,CAAAc,SAAA,aAK9BC,OAAO,CAAA,EAAA;EAAAC,YAAA,EAAA,IAAA;EAAAC,UAAA,EAAA,IAAA;EAAAC,QAAA,EAAA,IAAA;AAAAC,EAAAA,WAAA,cAAA;AAAA,IAAA,OAAyB,IAAI,CAAA;AAAA,GAAA;AAAA,CAAA,CAAA,GAAAnB,MAAA,EAAA;;AA+BvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASoB,UAAUA,CACxB;AAAEC,EAAAA,EAAAA;AAAU,CAAC,EACbC,GAAW,EACXC,OAAqB,GAAG,EAAE,EAChB;AACV,EAAA,IAAIC,KAAK,GAAG,IAAIzB,KAAK,EAAK,CAAA;AAC1B,EAAA,IAAI0B,UAAU,GAAG,IAAIC,eAAe,EAAE,CAAA;EAEtCL,EAAE,CAACM,OAAO,CAAC,MAAMF,UAAU,CAACG,KAAK,EAAE,CAAC,CAAA;AAEpCC,EAAAA,cAAc,CACZC,KAAK,CAACR,GAAG,EAAE;IAAES,MAAM,EAAEN,UAAU,CAACM,MAAM;IAAE,GAAGR,OAAAA;AAAQ,GAAC,CAAC,CAClDS,IAAI,CAAEC,QAAQ,IAAK;AAClBT,IAAAA,KAAK,CAACU,MAAM,GAAGD,QAAQ,CAACC,MAAM,CAAA;IAE9B,OAAOD,QAAQ,CAACE,IAAI,EAAE,CAAA;AACxB,GAAC,CAAC,CACDH,IAAI,CAAEI,IAAI,IAAK;IACdZ,KAAK,CAAChB,KAAK,GAAG4B,IAAI,CAAA;AACpB,GAAC,CAAC,CACDC,KAAK,CAAE5B,KAAK,IAAK;IAChBe,KAAK,CAACf,KAAK,GAAGA,KAAK,CAAA;AACrB,GAAC,CAAC,CACL,CAAA;AAED,EAAA,OAAOe,KAAK,CAAA;AACd,CAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAmDA;AACA;AACA;AACO,SAASc,UAAUA,CACxBhB,GAAqE,EACrEiB,IAAmB,EACnB;EACA,OAAOC,QAAQ,CAAEC,KAAK,IAAK;IACzB,IAAIC,MAAM,GAAG,OAAOpB,GAAG,KAAK,QAAQ,GAAGA,GAAG,GAAGA,GAAG,EAAE,CAAA;AAClD,IAAA,IAAIqB,SAAiB,CAAA;IACrB,IAAIpB,OAAqB,GAAG,EAAE,CAAA;AAE9B,IAAA,IAAI,OAAOmB,MAAM,KAAK,QAAQ,EAAE;AAC9BC,MAAAA,SAAS,GAAGD,MAAM,CAAA;AACpB,KAAC,MAAM;MACL,IAAI;QAAEpB,GAAG;QAAE,GAAGiB,IAAAA;AAAK,OAAC,GAAGG,MAAM,CAAA;AAE7BC,MAAAA,SAAS,GAAGrB,GAAG,CAAA;AACfC,MAAAA,OAAO,GAAGgB,IAAI,CAAA;AAChB,KAAA;AAEA,IAAA,IAAIA,IAAI,EAAE;AACRhB,MAAAA,OAAO,GAAG;AAAE,QAAA,GAAGA,OAAO;QAAE,GAAGgB,IAAAA;OAAM,CAAA;AACnC,KAAA;AAEA,IAAA,OAAOnB,UAAU,CAAIqB,KAAK,EAAEE,SAAS,EAAEpB,OAAO,CAAC,CAAA;AACjD,GAAC,CAAC,CAAA;AACJ,CAAA;AAEAqB,eAAe,CAACN,UAAU,CAAC;;;;"}