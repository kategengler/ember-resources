{"version":3,"file":"from-thunk-inference.test.js","sources":["../../../../src/core/class-based/-type-tests/from-thunk-inference.test.ts"],"sourcesContent":["/**\n *\n * NOTE: these examples are explicitly for testing types and may not be\n *       suitable for actual runtime usage\n */\nimport { expectTypeOf } from 'expect-type';\n\n// import { AsThunk, Class, ContextOf, ExpandThunkReturn, Named, Positional } from '[core-types]';\nimport { Resource } from '../resource';\n\n/**\n * with no arguments specified\n */\nclass A extends Resource {\n  a = 1;\n}\n\n// TODO: rename to create when there are no args?\n// are there use cases for class-based Resources without args?\n// no args seems like it'd be easier as a function-resource.\n// Valid, no args present\n// A.from();\nA.from(() => ({}));\nA.from(() => []);\n\n// Invalid, A does not expect args\n// @ts-expect-error\nA.from(() => ({ positional: [1] }));\n//\n// Invalid, A does not expect args\n// @ts-expect-error\nA.from(() => ({ named: { foo: 2 } }));\n\n// valid, empty args are ok\nA.from(() => ({ positional: [], named: {} }));\n\nexport class UsageA {\n  a = A.from(this, () => ({}));\n  a1 = A.from(this, () => []);\n\n  // Invalid, A does not expect args\n  // @ts-expect-error\n  a2 = A.from(this, () => ({ positional: [1] }));\n\n  // Invalid, A does not expect args\n  // @ts-expect-error\n  a3 = A.from(this, () => ({ named: { foo: 2 } }));\n\n  // valid, empty args are ok\n  a4 = A.from(this, () => ({ positional: [], named: {} }));\n}\n\n/**\n * with all arguments specified\n */\ntype BArgs = {\n  positional: [num: number, greeting: string];\n  named: {\n    num: number;\n    str: string;\n  };\n};\n\nexport class B extends Resource<BArgs> {\n  b = 'b';\n}\n\n// Valid, all arguments provided\nB.from(() => {\n  return {\n    positional: [1, 'hi'],\n    named: { num: 2, str: 'there' },\n  };\n});\n\nexport class UsageB {\n  // everything missing\n  // @ts-expect-error\n  b = B.from(this, () => ({}));\n\n  // named is missing\n  // @ts-expect-error\n  b1 = B.from(this, () => ({ positional: [1, 'hi'] }));\n\n  // positional is missing\n  // @ts-expect-error\n  b2 = B.from(this, () => ({ named: { num: 2, str: 'there' } }));\n\n  // positional is incorrect\n  // @ts-expect-error\n  b3 = B.from(this, () => ({ positional: ['hi'] }));\n\n  // named is incorrect\n  // @ts-expect-error\n  b4 = B.from(this, () => ({ named: { str: 'there' } }));\n\n  // valid -- all args present\n  b5 = B.from(this, () => ({ positional: [1, 'hi'], named: { num: 2, str: 'there' } }));\n}\n\n/**\n * with all arguments, but capitalized (Signature style)\n */\n\ntype CArgs = {\n  Positional: [number, string];\n  Named: {\n    num: number;\n    str: string;\n  };\n};\n\nexport class C extends Resource<CArgs> {\n  c = 'c';\n}\n\n/**\n * The return value of the thunk has the correct type\n */\nexport class UsageC {\n  // decorator not needed for the type test (I don't want to import it)\n  /* @use */ cUse = C.from(() => ({ positional: [1, 'two'], named: { num: 3, str: 'four' } }));\n  cThis = C.from(this, () => ({ positional: [1, 'two'], named: { num: 3, str: 'four' } }));\n}\n\nexpectTypeOf(new UsageC().cUse).toEqualTypeOf<C>();\nexpectTypeOf(new UsageC().cThis).toEqualTypeOf<C>();\n"],"names":["A","Resource","constructor","args","_defineProperty","from","positional","named","foo","UsageA","B","num","str","UsageB","C","UsageC","expectTypeOf","cUse","toEqualTypeOf","cThis"],"mappings":"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"}