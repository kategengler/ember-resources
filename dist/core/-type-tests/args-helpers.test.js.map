{"version":3,"file":"args-helpers.test.js","sources":["../../../src/core/-type-tests/args-helpers.test.ts"],"sourcesContent":["import { expectTypeOf } from 'expect-type';\n\nimport { Resource } from '../class-based';\n\nimport type { ArgsFrom } from '../class-based/resource';\nimport type { EmptyObject, Named, Positional } from '[core-types]';\n\n// -----------------------------------------------------------\n// -----------------------------------------------------------\n// -----------------------------------------------------------\n\n/**\n * -----------------------------------------------------------\n * Named\n * -----------------------------------------------------------\n */\nexpectTypeOf<Named<unknown>>().toEqualTypeOf<EmptyObject>();\nexpectTypeOf<Named<{ named: { foo: number } }>>().toEqualTypeOf<{ foo: number }>();\nexpectTypeOf<Named<{ Named: { foo: number } }>>().toEqualTypeOf<{ foo: number }>();\nexpectTypeOf<Named<{ positional: [] }>>().toEqualTypeOf<EmptyObject>();\nexpectTypeOf<Named<{ Positional: [] }>>().toEqualTypeOf<EmptyObject>();\nexpectTypeOf<Named<{ Named: { foo: number }; Positional: [] }>>().toEqualTypeOf<{ foo: number }>();\n// @ts-expect-error\nexpectTypeOf<Named<{ named: { foo: number }; Positional: [] }>>().toEqualTypeOf<{ foo: number }>();\n\n/**\n * -----------------------------------------------------------\n * Positional\n * -----------------------------------------------------------\n */\nexpectTypeOf<Positional<unknown>>().toEqualTypeOf<[]>();\nexpectTypeOf<Positional<{ positional: [number] }>>().toEqualTypeOf<[number]>();\nexpectTypeOf<Positional<{ Positional: [number] }>>().toEqualTypeOf<[number]>();\nexpectTypeOf<Positional<{ named: { foo: number } }>>().toEqualTypeOf<[]>();\nexpectTypeOf<Positional<{ Named: { foo: number } }>>().toEqualTypeOf<[]>();\nexpectTypeOf<Positional<{ Named: { foo: number }; Positional: [number] }>>().toEqualTypeOf<\n  [number]\n>();\n// @ts-expect-error\nexpectTypeOf<Positional<{ Named: { foo: number }; positional: [number] }>>().toEqualTypeOf<\n  [number]\n>();\n\n/**\n * -----------------------------------------------------------\n * ArgsFrom\n * -----------------------------------------------------------\n */\nclass Foo {\n  foo = 'foo';\n}\nclass Bar extends Resource {\n  bar = 'bar';\n}\nclass Baz extends Resource<{ Named: { baz: string } }> {\n  baz = 'baz';\n}\nclass Bax extends Resource<{ Positional: [string] }> {\n  bax = 'bax';\n}\n// {} does not extend Resource\n// @ts-expect-error\nexpectTypeOf<ArgsFrom<{}>>().toEqualTypeOf<never>();\n// unknown does not extend Resource\n// @ts-expect-error\nexpectTypeOf<ArgsFrom<unknown>>().toEqualTypeOf<never>();\n// number does not extend Resource\n// @ts-expect-error\nexpectTypeOf<ArgsFrom<2>>().toEqualTypeOf<never>();\n// string does not extend Resource\n// @ts-expect-error\nexpectTypeOf<ArgsFrom<'string'>>().toEqualTypeOf<never>();\n// Foo does not extend Resource\n// @ts-expect-error\nexpectTypeOf<ArgsFrom<Foo>>().toEqualTypeOf<never>();\n\nexpectTypeOf<ArgsFrom<Bar>>().toEqualTypeOf<unknown>();\nexpectTypeOf<ArgsFrom<Baz>>().toEqualTypeOf<{ Named: { baz: string } }>();\nexpectTypeOf<ArgsFrom<Bax>>().toEqualTypeOf<{ Positional: [string] }>();\n"],"names":["expectTypeOf","toEqualTypeOf"],"mappings":";;;;;;;AAOA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACAA,YAAY,EAAkB,CAACC,aAAa,EAAe,CAAA;AAC3DD,YAAY,EAAqC,CAACC,aAAa,EAAmB,CAAA;AAClFD,YAAY,EAAqC,CAACC,aAAa,EAAmB,CAAA;AAClFD,YAAY,EAA6B,CAACC,aAAa,EAAe,CAAA;AACtED,YAAY,EAA6B,CAACC,aAAa,EAAe,CAAA;AACtED,YAAY,EAAqD,CAACC,aAAa,EAAmB,CAAA;AAClG;AACAD,YAAY,EAAqD,CAACC,aAAa,EAAmB,CAAA;;AAElG;AACA;AACA;AACA;AACA;AACAD,YAAY,EAAuB,CAACC,aAAa,EAAM,CAAA;AACvDD,YAAY,EAAwC,CAACC,aAAa,EAAY,CAAA;AAC9ED,YAAY,EAAwC,CAACC,aAAa,EAAY,CAAA;AAC9ED,YAAY,EAA0C,CAACC,aAAa,EAAM,CAAA;AAC1ED,YAAY,EAA0C,CAACC,aAAa,EAAM,CAAA;AAC1ED,YAAY,EAAgE,CAACC,aAAa,EAEvF,CAAA;AACH;AACAD,YAAY,EAAgE,CAACC,aAAa,EAEvF,CAAA;AAmBH;AACA;AACAD,YAAY,EAAgB,CAACC,aAAa,EAAS,CAAA;AACnD;AACA;AACAD,YAAY,EAAqB,CAACC,aAAa,EAAS,CAAA;AACxD;AACA;AACAD,YAAY,EAAe,CAACC,aAAa,EAAS,CAAA;AAClD;AACA;AACAD,YAAY,EAAsB,CAACC,aAAa,EAAS,CAAA;AACzD;AACA;AACAD,YAAY,EAAiB,CAACC,aAAa,EAAS,CAAA;AAEpDD,YAAY,EAAiB,CAACC,aAAa,EAAW,CAAA;AACtDD,YAAY,EAAiB,CAACC,aAAa,EAA8B,CAAA;AACzED,YAAY,EAAiB,CAACC,aAAa,EAA4B"}