{"version":3,"file":"thunk-helpers.test.js","sources":["../../../src/core/-type-tests/thunk-helpers.test.ts"],"sourcesContent":["/**\n * These type tests are sorted alphabetically by the name of the type utility\n */\nimport { expectTypeOf } from 'expect-type';\n\nimport type { AsThunk, EmptyObject, LoosenThunkReturn, NoArgs, ThunkReturnFor } from '[core-types]';\n\n/**\n * -----------------------------------------------------------\n * AsThunk - uses ThunkReturnFor + LoosenThunkReturn\n * -----------------------------------------------------------\n */\nexpectTypeOf<AsThunk<{}>>().toEqualTypeOf<() => NoArgs | [] | EmptyObject | undefined | void>();\nexpectTypeOf<AsThunk<unknown>>().toEqualTypeOf<\n  () => NoArgs | [] | EmptyObject | undefined | void\n>();\nexpectTypeOf<AsThunk<[]>>().toEqualTypeOf<() => NoArgs | [] | EmptyObject | undefined | void>();\nexpectTypeOf<AsThunk<{ foo: number }>>().toEqualTypeOf<\n  () => NoArgs | [] | EmptyObject | undefined | void\n>();\n\nexpectTypeOf<AsThunk<{ named: { foo: number } }>>().toEqualTypeOf<\n  () => { named: { foo: number } } | { foo: number }\n>();\nexpectTypeOf<AsThunk<{ named: { foo: number }; positional: [string] }>>().toEqualTypeOf<\n  () => { named: { foo: number }; positional: [string] }\n>();\nexpectTypeOf<AsThunk<{ positional: [number] }>>().toEqualTypeOf<\n  () => { positional: [number] } | [number]\n>();\n\n/**\n * -----------------------------------------------------------\n * LoosenThunkReturn\n * -----------------------------------------------------------\n */\nexpectTypeOf<LoosenThunkReturn<{ named: { foo: 1 }; positional: [] }>>().toEqualTypeOf<\n  { foo: 1 } | { named: { foo: 1 } }\n>();\nexpectTypeOf<LoosenThunkReturn<{ named: EmptyObject; positional: [string] }>>().toEqualTypeOf<\n  [string] | { positional: [string] }\n>();\nexpectTypeOf<LoosenThunkReturn<{ named: { foo: 1 }; positional: [string] }>>().toEqualTypeOf<{\n  named: { foo: 1 };\n  positional: [string];\n}>();\n\n/**\n * -----------------------------------------------------------\n * ThunkReturnFor\n * -----------------------------------------------------------\n */\nexpectTypeOf<ThunkReturnFor<{}>>().toEqualTypeOf<NoArgs>();\nexpectTypeOf<ThunkReturnFor<unknown>>().toEqualTypeOf<NoArgs>();\nexpectTypeOf<ThunkReturnFor<object>>().toEqualTypeOf<NoArgs>();\n// How to guard against this situation?\n// expectTypeOf<ThunkReturnFor<Record<string, unknown>>>().toEqualTypeOf<NoArgs>();\nexpectTypeOf<ThunkReturnFor<{ positional: [string] }>>().toEqualTypeOf<{\n  positional: [string];\n  named: EmptyObject;\n}>();\nexpectTypeOf<ThunkReturnFor<{ Positional: [string] }>>().toEqualTypeOf<{\n  positional: [string];\n  named: EmptyObject;\n}>();\nexpectTypeOf<ThunkReturnFor<{ named: { baz: string } }>>().toEqualTypeOf<{\n  positional: [];\n  named: { baz: string };\n}>();\nexpectTypeOf<ThunkReturnFor<{ Named: { baz: string } }>>().toEqualTypeOf<{\n  positional: [];\n  named: { baz: string };\n}>();\n"],"names":["expectTypeOf","toEqualTypeOf"],"mappings":";;AAAA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACAA,YAAY,EAAe,CAACC,aAAa,EAAsD,CAAA;AAC/FD,YAAY,EAAoB,CAACC,aAAa,EAE3C,CAAA;AACHD,YAAY,EAAe,CAACC,aAAa,EAAsD,CAAA;AAC/FD,YAAY,EAA4B,CAACC,aAAa,EAEnD,CAAA;AAEHD,YAAY,EAAuC,CAACC,aAAa,EAE9D,CAAA;AACHD,YAAY,EAA6D,CAACC,aAAa,EAEpF,CAAA;AACHD,YAAY,EAAqC,CAACC,aAAa,EAE5D,CAAA;;AAEH;AACA;AACA;AACA;AACA;AACAD,YAAY,EAA4D,CAACC,aAAa,EAEnF,CAAA;AACHD,YAAY,EAAmE,CAACC,aAAa,EAE1F,CAAA;AACHD,YAAY,EAAkE,CAACC,aAAa,EAGxF,CAAA;;AAEJ;AACA;AACA;AACA;AACA;AACAD,YAAY,EAAsB,CAACC,aAAa,EAAU,CAAA;AAC1DD,YAAY,EAA2B,CAACC,aAAa,EAAU,CAAA;AAC/DD,YAAY,EAA0B,CAACC,aAAa,EAAU,CAAA;AAC9D;AACA;AACAD,YAAY,EAA4C,CAACC,aAAa,EAGlE,CAAA;AACJD,YAAY,EAA4C,CAACC,aAAa,EAGlE,CAAA;AACJD,YAAY,EAA8C,CAACC,aAAa,EAGpE,CAAA;AACJD,YAAY,EAA8C,CAACC,aAAa,EAGpE"}